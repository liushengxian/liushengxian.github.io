<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on Shawn New Blog</title>
    <link>//liushengxian.github.io/tags/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on Shawn New Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Aug 2025 14:30:00 +0800</lastBuildDate>
    <atom:link href="//liushengxian.github.io/tags/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用AI重构我的blog</title>
      <link>//liushengxian.github.io/posts/refactor-blog-using-ai/</link>
      <pubDate>Tue, 26 Aug 2025 14:30:00 +0800</pubDate>
      <guid>//liushengxian.github.io/posts/refactor-blog-using-ai/</guid>
      <description>&lt;h2 id=&#34;ai助手如何帮我重构博客&#34;&gt;AI助手如何帮我重构博客&lt;/h2&gt;&#xA;&lt;p&gt;今天，我决定借助GitHub Copilot的能力来重构我的博客。作为一个技术博客，我一直觉得它缺少一些结构性的元素来帮助读者更好地浏览内容。通过与AI助手的对话，我完成了一系列改进，现在记录下这个过程。&lt;/p&gt;&#xA;&lt;h3 id=&#34;添加标签系统&#34;&gt;添加标签系统&lt;/h3&gt;&#xA;&lt;p&gt;我的博客最大的问题是缺乏良好的内容分类。虽然文章按时间顺序排列，但读者很难找到特定主题的内容。&lt;/p&gt;&#xA;&lt;h4 id=&#34;为所有文章添加标签&#34;&gt;为所有文章添加标签&lt;/h4&gt;&#xA;&lt;p&gt;首先，我让AI助手为所有博文添加了合适的标签。经过分析我的文章内容后，AI助手设计了一个包含以下主要分类的标签系统：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;生活相关&lt;/strong&gt;：生活、日常、家庭、心情&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;个人成长&lt;/strong&gt;：个人成长、感悟、思考、回忆&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;技术相关&lt;/strong&gt;：技术、前端、问题解决、教程&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;兴趣爱好&lt;/strong&gt;：读书、游戏、影评&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;其他&lt;/strong&gt;：工作、博客&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;每篇文章都被赋予了2-3个最相关的标签，使内容更易于分类和发现。&lt;/p&gt;&#xA;&lt;h4 id=&#34;创建标签导航页&#34;&gt;创建标签导航页&lt;/h4&gt;&#xA;&lt;p&gt;为了让读者能够轻松浏览不同类别的内容，我创建了一个专门的标签页，组织了所有标签并提供了简短的描述，帮助访问者理解每个标签所代表的内容类型。&lt;/p&gt;&#xA;&lt;h4 id=&#34;将标签页添加到主导航&#34;&gt;将标签页添加到主导航&lt;/h4&gt;&#xA;&lt;p&gt;为了让标签系统更容易被访问到，我在网站的主导航菜单中添加了一个&amp;quot;标签&amp;quot;链接，使用了Font Awesome的标签图标使其在视觉上更加直观。&lt;/p&gt;&#xA;&lt;h3 id=&#34;清理博客内容&#34;&gt;清理博客内容&lt;/h3&gt;&#xA;&lt;p&gt;除了添加标签系统外，我还：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;删除了所有标记为草稿的文章，确保只有完成的内容被展示&lt;/li&gt;&#xA;&lt;li&gt;简化了标签系统，移除了冗余的标签&lt;/li&gt;&#xA;&lt;li&gt;统一了文章的元数据格式，使博客整体风格更加一致&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;收获与体会&#34;&gt;收获与体会&lt;/h3&gt;&#xA;&lt;p&gt;这次借助AI重构博客的经历让我意识到，技术不仅可以用于创建内容，也可以帮助我们更好地组织和展示内容。通过几个简单的对话，我的博客获得了以下改进：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;更好的内容导航&lt;/strong&gt; - 读者现在可以通过标签快速找到感兴趣的主题&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;更清晰的内容结构&lt;/strong&gt; - 移除了草稿内容，使发布的文章质量更高&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;更一致的元数据格式&lt;/strong&gt; - 标准化了所有文章的前置信息&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这种结构化的改进不仅对读者有利，对我自己也是有帮助的。当我继续写作时，这个标签系统将帮助我思考文章的分类和主题，使我的博客内容更加有条理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;未来计划&#34;&gt;未来计划&lt;/h2&gt;&#xA;&lt;p&gt;在这次重构的基础上，我计划继续改进我的博客：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;可能考虑按标签或主题组织一些精选文章合集&lt;/li&gt;&#xA;&lt;li&gt;进一步优化博客的视觉设计，使其更加现代化&lt;/li&gt;&#xA;&lt;li&gt;添加更多互动元素，如评论系统和社交分享功能&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;通过这次重构，我重新认识到了博客作为个人表达和知识分享平台的价值。希望这些改进能让我的内容对读者更有帮助，也能激励我继续写作和分享。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;感谢GitHub Copilot的协助，让这次重构变得简单而高效。技术的进步确实为内容创作者带来了新的可能性。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;这篇blog完全由Copilot生成。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monaco Editor的一些问题记录</title>
      <link>//liushengxian.github.io/posts/monaco-editor-problems/</link>
      <pubDate>Tue, 07 Feb 2023 00:00:14 +0800</pubDate>
      <guid>//liushengxian.github.io/posts/monaco-editor-problems/</guid>
      <description>&lt;p&gt;上周末开始老薛开始呼叫支援，他的项目里的monaco-editor在升级的时候遭遇问题，结果TypeScript编译过程报错了。&lt;/p&gt;&#xA;&lt;p&gt;周末那天因为仓促接到需求，在node@18 + webpack@5 下面搭建了一次monaco-editor和monaco-languageclient。项目代码是能跑过编译的。就把项目代码post到GitHub上，算是草草交差了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/liushengxian/monaco-client-webpack-test&#34;&gt;https://github.com/liushengxian/monaco-client-webpack-test&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;但是今天又接到消息。他测试后发现，node 12下也还是行不通的。node 18却根本不需要安装monaco-vscode-api都可以通过编译。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CraigMeng/monaco-webpack-node-12&#34;&gt;https://github.com/CraigMeng/monaco-webpack-node-12&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;于是乎，今天花了两小时一起debug。最终也没get到解决方案。但是发现了一些小区别：&lt;/p&gt;&#xA;&lt;p&gt;比如：https://github.com/nodejs/node/pull/29978&lt;/p&gt;&#xA;&lt;p&gt;node到13.2才开始支持&lt;strong&gt;条件式导出&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;最后我们定位到的问题是，vscode/services找不到这个定义。然而这个定义是在一个虚假的vscode包里。因为我们用package.json里定义的vscode是&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;vscode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;npm:@codingame/monaco-vscode-api@^1.69.17&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而在我将node版本升级到13，14的时候，项目却依然报同样的错。甚至于升级到18的时候，dev-server直接挂掉了。最后没有办法，我们只能给monaco-languageclient提了一个issue：&#xA;&lt;a href=&#34;https://github.com/TypeFox/monaco-languageclient/issues/458&#34;&gt;https://github.com/TypeFox/monaco-languageclient/issues/458&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;虽然可能于事无补，毕竟老薛这个repo的node版本已经太旧了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>记录工作中遇到的两个bug</title>
      <link>//liushengxian.github.io/posts/two-bugs-in-work/</link>
      <pubDate>Wed, 11 Nov 2020 01:23:08 +0800</pubDate>
      <guid>//liushengxian.github.io/posts/two-bugs-in-work/</guid>
      <description>&lt;p&gt;很久没有写blog了。这次在工作中遇到两个bug，更新一下。&lt;/p&gt;&#xA;&lt;h3 id=&#34;生产环境与开发环境不一致的问题&#34;&gt;生产环境与开发环境不一致的问题&lt;/h3&gt;&#xA;&lt;p&gt;在上线几个新功能之后，突然QA反馈线上的某个页面的switch按钮不见了。当然，因为程序具有默认行为，所以这几个按钮不见倒也没有太多的用户反馈。&lt;/p&gt;&#xA;&lt;p&gt;因为可能在用户看来这个页面本来就是不能做更多控制的。所以我有足够的时间来找出问题的所在。&lt;/p&gt;&#xA;&lt;p&gt;在尝试了多次改动之后，发现这个switch按钮在开发环境&amp;amp;测试环境都能看到。但是一到了beta环境或者线上生产环境之后，就还是莫名其妙的失踪了。在线上的console里面甚至看不到任何有用的报错信息。。只有一个奇怪的没有任何提示的红色Error。&lt;/p&gt;&#xA;&lt;p&gt;用Chrome的console指针点击页面后，发现按钮组件的dom根本没有生成，而是一个类似于v-if=&amp;ldquo;false&amp;quot;情况下的&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!-- --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我开始怀疑是否组件没有正确传入参数，并尝试了几次修改控制组件展示的变量，但是都没有成功，仍旧是在开发环境生龙活虎，在线上、beta消失不见。&lt;/p&gt;&#xA;&lt;p&gt;在咨询浩洋哥之后，他提出可以让运维看一下是否发布了正确的版本。&lt;/p&gt;&#xA;&lt;p&gt;但是我对比了自己push上去的代码的hash值与CI中build的hash值，却是一样的，说明发布环境没有什么问题。&lt;/p&gt;&#xA;&lt;p&gt;就在我百思不得其解的时候，我在beta环境上看到了一个错误提示。应该也就是线上那个被过滤掉的错误提示信息。&lt;/p&gt;&#xA;&lt;p&gt;大概意思是说，true不能作为值 赋值给onClick。&lt;/p&gt;&#xA;&lt;p&gt;恍然大悟，想到自己在这个组件里看到的on={true}这个选项。意识到这里的on被某个插件（怀疑是升级过后的babel插件、或者typescript插件）自动识别成了onClick。然后将布尔值赋给onClick，自然会无法赋值成功，然后导致运行时错误，dom也就无法顺利渲染出来了。&lt;/p&gt;&#xA;&lt;p&gt;将on这个属性改为switch之后，上beta，果然，问题解决了。&lt;/p&gt;&#xA;&lt;h3 id=&#34;启发&#34;&gt;启发&lt;/h3&gt;&#xA;&lt;p&gt;首先这个坑是前面人留下来的，用on来作为一个标志记录组件的状态属实是有些问题的。一般朋友命名时应该都不会用这么简单的名称来写到dom属性上面去吧。&lt;/p&gt;&#xA;&lt;p&gt;其次，对我的启发是，自己对代码打包过程的理解还是不足的。如果能够知道每个依赖都做了什么的话，也许在一开始从线上/线下环境不一致就应该考虑到是打包工具的问题。继而寻找代码中有哪些地方做的不够规范。&lt;/p&gt;&#xA;&lt;h3 id=&#34;vue-router中replace方法失效的问题&#34;&gt;vue-router中replace方法失效的问题&lt;/h3&gt;&#xA;&lt;p&gt;第二个问题更加让人头疼。搞了一天才总算搞定。&lt;/p&gt;&#xA;&lt;p&gt;当前负责的这个项目中，vue-router的replace方法莫名失效了。结果导致在很多机型上面，操作应用之后各种页面都push进history栈当中。在返回的时候，会有很多之前的页面，返回半天才能返回到应用的入口。&lt;/p&gt;&#xA;&lt;p&gt;前面的项目负责人为了解决这个问题，在程序中用了hack的方法，监听页面左上角的返回按钮，在返回到首页的时候，点击返回按钮直接关闭应用。而我也做了一个优化，就是用客户端同事提供的sdk，监听了返回事件，进行页面的跳转。&lt;/p&gt;&#xA;&lt;p&gt;但是这个方法也有其无法处理的问题。就是在iOS的机型上面，左滑返回上一页是不在返回事件控制的范畴之内的。导致在iOS上面左滑很多次都有奇怪的页面，很多次才能退出应用。当然一直使用push也会导致应用算占据的内存不断膨胀，也许在操作多次之后就会crash（未验证是否keep-alive会有助于解决这个情况）&lt;/p&gt;&#xA;&lt;p&gt;所以我就着手开始解决这个问题。&lt;/p&gt;&#xA;&lt;p&gt;其实问题一开始发现也是QA这边发现的，反馈的问题是我们上线新代码之后频繁出现了这个问题（这个问题QA同学一直有遇到过，但是这几次上线之后特别频繁，稳定复现）。&lt;/p&gt;&#xA;&lt;p&gt;第一个发现的问题就是，在应用首页多个tab中，之前的开发使用了$router.replace()来记录首页多个tab的变化。当我把这个$router.replace()去掉之后，应用正常切换tab，且观察到浏览器当中的history栈不再增加。&lt;/p&gt;&#xA;&lt;p&gt;理论上使用replace来做这种事情是没有问题的。但是在这个replace不生效，莫名变成push的情况下，就变得很糟糕。可以通过快速点击首页的tab实现生成爆炸长度的history。&lt;/p&gt;&#xA;&lt;p&gt;当我搜索项目后，发现这个replace主要是提供了一个新的query，叫做tabIndex的值，给另外仅有的一个地方使用。这就让我很放心了，其实这种在app内的应用，完全可以不需要这种地址，反正每次进入都是首页，而且切换tab的事情完全可以放到vuex当中存储。没必要放到路由当中，如果实在不行，就把首页的这个replace撤掉，然后改写一下那仅有的一个地方好了。&lt;/p&gt;&#xA;&lt;p&gt;但是问题没有那么简单，虽然这个tabIndex只有一个地方使用，但使用$router.replace()的地方可不止一处，而且很多地方都是不可替换的。&lt;/p&gt;&#xA;&lt;p&gt;那么我们继续调查为什么这个router.replace()失败了呢。当我回归到vue-router的文档时，发现replace方法的第二个、第三个参数可以分别设置为replace成功与失败的回调。当然也可以不设置，这样replace返回的是一个promise，可以使用then，catch语句进行捕获结果/错误。&lt;/p&gt;&#xA;&lt;p&gt;心想这样总可以找到问题了吧。然后用了回调&amp;amp;catch语句发现，的确是跳转路由失败了，但却没有返回值。（笔者用的vue-router版本不是最新的，最新的代码已经添加了这个报错信息）&lt;/p&gt;&#xA;&lt;p&gt;返回的报错值是undefined，就很让人头大，不知道问题出在哪里。&lt;/p&gt;&#xA;&lt;p&gt;尝试了一下replaceState方法，发现在使用这个方法的时候，能够正确地更新history历史。实在不行我就把所有的$router.replace()都替换成history.replaceState()吧。我这么想着。&lt;/p&gt;&#xA;&lt;p&gt;回头去看vue-router的文档，发现有一个replace选项，甚至在网上查到尤大在0.x版本的github issue上面跟网友探讨是否replace的默认值设置为true会更好一些。抱着试一试的心态我给项目中所有replace方法添加了replace： true。&lt;/p&gt;&#xA;&lt;p&gt;果不其然，没有任何用处。&lt;/p&gt;&#xA;&lt;p&gt;没办法，只能硬着头皮去看vue-router的源码了。使用debugger开始单步调试，看了大半天，也没发现什么问题。看到不知道几层的代码逻辑之后，连自己也绕晕了。不想再读下去了。&lt;/p&gt;&#xA;&lt;p&gt;心想，难道真的升级下vue-router的版本就可以了？于是自己抱着怀疑的态度，去随便搜索了一个公司内的其他项目，确认了代码中也使用了replace方法，然后发现不论是公司的脚手架，还是vue-router的版本，都是一样的。&lt;/p&gt;&#xA;&lt;p&gt;果然，问题不出在vue-router或者脚手架的版本上面。前面已经翻过脚手架的CHANGELOG，根本没有发现有什么修复vue-router相关的问题。在网上搜索也找不到相同的情况。&lt;/p&gt;&#xA;&lt;p&gt;只好无奈地继续翻vue-router的源码，单步调试看问题出在哪里。嗯，，vue-router最后会生成一个队列，然后把所有钩子函数都执行一遍，然后跳到了一个方法当中去，根据这个方法中的to.replace来看是需要使用push还是replace方法。等等。。？这个to是哪里来的？不是replace方法中的replace选项，那是哪里来的？看着单步调试中，栈在处理完队列的时候，history的长度又增加了1，就觉得莫名忧伤。&lt;/p&gt;&#xA;&lt;p&gt;就在这时，我找不到原因的时候，又看到了自己之前尝试的replaceState()的代码，在浏览器中尝试，突然发现自己页面上面虽然能够跳转成功，但是页面的query中携带的用户信息&amp;amp;其他query都不见了。&lt;/p&gt;&#xA;&lt;p&gt;这就让我想起之前看到的项目中，两年前项目开始的时候就已经添加上的那个写给vue的插件了。这个插件添加了一个beforeRoute钩子，在钩子中，保留了需要保存的query信息。我想如果要用replaceState来做的话，也要看下怎么兼容这个方案吧。&lt;/p&gt;&#xA;&lt;p&gt;打开plugin的文件的时候，突然一道灵光闪过，我意识到问题所在了。&lt;/p&gt;&#xA;&lt;p&gt;！！！！！！&lt;/p&gt;&#xA;&lt;p&gt;就是这个plugin在它的钩子里使用next()方法修改url的时候，没有使用replace参数！导致每次$router.replace()都会新增一个页面到history栈当中去！&lt;/p&gt;&#xA;&lt;p&gt;在给next方法添加了replace：true选项之后，反复试了几次，发现果然history在$router.replace()的时候不再增加了。&lt;/p&gt;&#xA;&lt;p&gt;我解决了一个两年前的bug！&lt;/p&gt;&#xA;&lt;h3 id=&#34;启发-1&#34;&gt;启发&lt;/h3&gt;&#xA;&lt;p&gt;谁也不曾想到，这个问题居然会是这样引起的。&lt;/p&gt;&#xA;&lt;p&gt;反思自己一步步来debug的过程，可以看到自己对vue-router的原理一步步加深，但是还是没有完全吃透。&lt;/p&gt;&#xA;&lt;p&gt;所以，还是努力把vue-router的源码搞清楚吧。这样再次遇到类似的问题时候，就会更快定位到问题所在。&lt;/p&gt;&#xA;&lt;p&gt;再一个启发就是，vue-router已经经历了社区的验证，其实不需要花费过多时间在找它的问题上面，而应该将问题聚焦于自己的业务代码上面。毕竟其他使用vue-router的项目，都没有遇到这个奇葩的问题。所以问题更大可能性是出在我们自己的业务代码/项目自有的框架上面。&lt;/p&gt;&#xA;&lt;h3 id=&#34;最后&#34;&gt;最后&lt;/h3&gt;&#xA;&lt;p&gt;晚安！ 好好休息，保持好状态，不要过分熬夜！就算进度赶不上，也不要太过着急了！&lt;/p&gt;</description>
    </item>
    <item>
      <title>拯救你的ubuntu</title>
      <link>//liushengxian.github.io/posts/save_you_linux_system/</link>
      <pubDate>Thu, 08 Mar 2018 11:19:14 +0800</pubDate>
      <guid>//liushengxian.github.io/posts/save_you_linux_system/</guid>
      <description>&lt;p&gt;在给大金鱼的ubuntu添加gulp相关的环境变量时候，因为看了不正确的教程。把/opt/profile里的内容修改了，导致无法进入系统。登录界面输入正确密码反复卡在登录界面。&lt;/p&gt;&#xA;&lt;p&gt;折腾了许久，发现了解决方案：&#xA;在启动系统的时候长按shift，进入Linux的Recovery Mode，但是，这个mode下面却无法修改文件。在grub选择Recovery Mode的时候按E，编辑启动文件来修改启动方式。&lt;/p&gt;&#xA;&lt;p&gt;将 ro recovery nomodeset 改为 rw single init=/bin/bash&lt;/p&gt;&#xA;&lt;p&gt;参考资料：&lt;a href=&#34;http://blog.csdn.net/code_segment/article/details/78145574&#34;&gt;recovery mode&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>配置我的工作项目</title>
      <link>//liushengxian.github.io/posts/my_way_to_config_work_project/</link>
      <pubDate>Thu, 04 May 2017 23:49:00 +0800</pubDate>
      <guid>//liushengxian.github.io/posts/my_way_to_config_work_project/</guid>
      <description>&lt;h3 id=&#34;配置工作项目的过程&#34;&gt;配置工作项目的过程&lt;/h3&gt;&#xA;&lt;p&gt;鶸米一共花了整整三天晚上才把环境配好。期间记录了自己到底干了什么。下面梳理下配置流程。&lt;/p&gt;&#xA;&lt;h4 id=&#34;day-1&#34;&gt;Day 1&lt;/h4&gt;&#xA;&lt;p&gt;0.安装Mint。用公司的那个安装盘安装的。然后参考[这里][ref-1]。&#xA;[ref-1]: &lt;a href=&#34;http://blog.csdn.net/albertjone/article/details/54633747&#34;&gt;http://blog.csdn.net/albertjone/article/details/54633747&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;1.download netease music for linux;&#xA;下载网易云音乐。没有小姐姐的歌声自己在这里折腾系统简直熬不下去。【手动滑稽】&lt;/p&gt;&#xA;&lt;p&gt;2.download hardware from startup panel;&#xA;因为下载了播放器但还是没有声音。很郁闷，所以尝试装下驱动。然而并没有什么卵用。&lt;/p&gt;&#xA;&lt;p&gt;3.sudo apt-get update/sudo apt-get upgrade&#xA;[upgrade is breaking here.]&#xA;按照上面那个链接里的文章，尝试这两个命令。前面的OK了 但是upgrade总是会中断。&lt;/p&gt;&#xA;&lt;p&gt;4.download chrome for linux;&#xA;wget &lt;a href=&#34;https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb&#34;&gt;https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb&lt;/a&gt;&#xA;sudo gdebi google-chrome-stable_current_amd64.deb&#xA;下载Chrome浏览器。Linux上的Firefox有时候跟Windows的IE的命运是一样的。&lt;/p&gt;&#xA;&lt;p&gt;5.no sound: changing into the back plug.(Mint 18)(Someone told me to upgrade linux kernel!)&#xA;还是没有声音，但是调了半天之后发现都没有问题。后来我把耳机从前面的孔插到后面的孔就好了【=。=】&lt;/p&gt;&#xA;&lt;p&gt;6.install git.&#xA;安装Git。&lt;/p&gt;&#xA;&lt;p&gt;7.generate my ssh-key for github.&#xA;生成本机的SSH-KEY。多台机器其实可以使用相同的KEY。但是这里还是新生成了。&lt;/p&gt;&#xA;&lt;p&gt;8.download shadowsocks-qt5.&#xA;装了半天想要google下一些问题 但是发现没有翻墙。于是这里开了小插曲。自己搭了个翻墙服务。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-qt5/wiki&#34;&gt;https://github.com/shadowsocks/shadowsocks-qt5/wiki&lt;/a&gt;&#xA;(sudo add-apt-repository ppa:hzwhuang/ss-qt5&#xA;sudo apt-get update&#xA;sudo apt-get install shadowsocks-qt5)&lt;/p&gt;</description>
    </item>
    <item>
      <title>记录一个jQuery的问题</title>
      <link>//liushengxian.github.io/posts/record_a_jquery_bug/</link>
      <pubDate>Wed, 08 Mar 2017 10:37:45 +0800</pubDate>
      <guid>//liushengxian.github.io/posts/record_a_jquery_bug/</guid>
      <description>&lt;h3 id=&#34;记录一个jquery的bug的查找过程&#34;&gt;记录一个jQuery的bug的查找过程&lt;/h3&gt;&#xA;&lt;p&gt;想写这个也是觉得无聊。而且想起了那个巨硬工程师gay里gay气的丑恶嘴脸。虽然是很无聊的一个bug，但是还是拿来记录一下吧。&lt;/p&gt;&#xA;&lt;h4 id=&#34;发现问题&#34;&gt;发现问题&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;//liushengxian.github.io/post/imgs/bug-01.png&#34; alt=&#34;问题截图&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这个问题是由我司的测试小姐姐们提出来的。在IE9上面我们的侧边评论栏的评论无论内容多少都会被折叠。首先到IE9上面去查看DOM结构，发现如下的内嵌style：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;//liushengxian.github.io/post/imgs/bug-03.png&#34; alt=&#34;有问题的DOM结构&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;很明显，不知道是谁给添加了一个line-height:3px的限制。&lt;/p&gt;&#xA;&lt;h4 id=&#34;定位问题&#34;&gt;定位问题&lt;/h4&gt;&#xA;&lt;p&gt;在PHPStorm里搜索这个评论列表的id，翻来翻去定位到了以下的这个方法：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;contentToggle: function () {&#xA;let $dom = $(&#39;#js_comment_list .txt p&#39;);&#xA;$dom.each(function (index) {&#xA;&#x9;let $domHeight = parseInt($(this).css(&#39;height&#39;));&#xA;&#x9;let $domLineHeight = parseInt($(this).css(&#39;lineHeight&#39;));&#xA;&#x9;//console.info(&#39;line height is &#39;+$domLineHeight+&#39;,index is:&#39;+index);&#xA;&#x9;let $domMaxHeight = $domLineHeight * 3;&#xA;&#x9;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;找到问题&#34;&gt;找到问题&lt;/h4&gt;&#xA;&lt;p&gt;看到最后那行的$domLineHeight * 3，我想大概大家也明白了。因为获取的LineHeight可能是没有单位的1，乘以3加上px就添加到了那上面了。所以在代码里添加上面那一行控制台输出测试下，在IE9/Chrome上面分别得到以下结果：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;//liushengxian.github.io/post/imgs/bug-02.png&#34; alt=&#34;IE9的控制台输出&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;//liushengxian.github.io/post/imgs/bug-04.png&#34; alt=&#34;Chrome的控制台输出&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;果然如我们所推理的，在IE9下面输出的是不带单位的数字，而我们代码里默认返回值以px为单位的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://bugs.jquery.com/ticket/13472&#34;&gt;JQuery Bug Report&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;解决问题&#34;&gt;解决问题&lt;/h4&gt;&#xA;&lt;p&gt;我所想的解决方法是，看line-height是否是小于12的值，如果是，则说明是一个相对值，对吧？&lt;/p&gt;&#xA;&lt;p&gt;但是实际上讨论之后，因为这个comment-box只在这个地方用到。所以干脆把line-height写成了一个固定值 18。&lt;/p&gt;&#xA;&lt;h4 id=&#34;总结问题&#34;&gt;总结问题&lt;/h4&gt;&#xA;&lt;p&gt;总结个毛啊 有啥好总结的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>欢迎来到我的新博客</title>
      <link>//liushengxian.github.io/posts/welcome_to_my_new_blog/</link>
      <pubDate>Sun, 06 Nov 2016 11:00:05 +0800</pubDate>
      <guid>//liushengxian.github.io/posts/welcome_to_my_new_blog/</guid>
      <description>&lt;h4 id=&#34;使用hugo重新搭建我的个人博客&#34;&gt;使用Hugo重新搭建我的个人博客&lt;/h4&gt;&#xA;&lt;p&gt;听从了杨老师的建议，今天用Hugo重新搭建了自己的个人博客。搭建的过程非常之简单，比起jekyll那茫茫多的配置来说，简直就是傻瓜式的。但是我还是花费了三个小时的时间——其中两个半小时用来挑主题跟自己修图片。。。&#xA;至于以前blog里的那些个文章，还是算了吧，本来也没有几篇内容，而且东西也太水了。&lt;/p&gt;&#xA;&lt;p&gt;上午挑了半天的主题，下午想补充下about页面的时候，发现选出来的主题跟杨老师是一样的。。。大概是主题太少了吧。也说明我的审美也还算正常吧= =！&lt;/p&gt;&#xA;&lt;p&gt;我还挑了下面这几个主题：&lt;/p&gt;&#xA;&lt;p&gt;1.&lt;a href=&#34;http://themes.gohugo.io/artists/&#34;&gt;Artists&lt;/a&gt;  ——第一眼让我觉得惊艳的主题&#xA;跟现在这个theme的样式有些类似，而且中间照片里的文艺大叔一脸惊愕的表情，给这个theme增添了十分的魅力。不过看了demo之后我就放弃了=。=，因为只想找个最方便，简单拿来写blog的主题，而且现在又没有能拿得出手的项目，也没有什么客户评论之类的。很不错的主题，但是不符合我的需求。&lt;/p&gt;&#xA;&lt;p&gt;2.&lt;a href=&#34;http://themes.gohugo.io/highlights/&#34;&gt;Highlights&lt;/a&gt;  ——比较漂亮的一页式主题推荐&#xA;也是一个一页式的模板。HTML5，但是讲道理看到有些首次加载那么费劲之后，我觉得做个blog还是简单一点的好，虽然有些特效的确很炫酷，可主要还是要拿来写博客的不是吗。同样因为只是一页的还有&lt;a href=&#34;http://themes.gohugo.io/hugo-identity-theme/&#34;&gt;Hugo Identity&lt;/a&gt; 。上午用的时候死活加载不出来，给人的体验非常差呢。但是不得不承认，加载出来还是很漂亮的。还有一个&lt;a href=&#34;http://themes.gohugo.io/hugo-smpl-theme/&#34;&gt;hugo-smpl-theme&lt;/a&gt;,这个的demo页面倒是一直打不开，难道我只是翻墙到了另一个天朝GFW里？&lt;/p&gt;&#xA;&lt;p&gt;3.&lt;a href=&#34;http://themes.gohugo.io/hugo-me-theme/&#34;&gt;Me&lt;/a&gt;   ——几个让我觉得很合适的主题推荐&#xA;这个是我下载好了之后第一个load的主题。跟我之前在jekyll上面使用的主题有些许相似。基本功能也已经做得比较完善，不需要太多的修改了。但是我想吐槽的是，他说的支持的几个默认颜色除了默认的蓝色，其他几个真的是土的不行啊。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://themes.gohugo.io/hugo-geo/&#34;&gt;hugo-geo&lt;/a&gt;&#xA;这个是我第二个看中的主题。也是提供了足够的功能。页面配色也很舒服，左侧栏的特效也很棒。要不是我看了主题作者个人网站上那张他自己的大脸的话，也许我就用这个主题了。讲道理，真的是有点不舒服。。。什么，我自己改小吗。。改小了也未必好看呢。。。而且我只是说这个比较合适，但是有更炫酷的，为什么还要用这个呢=w=&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://themes.gohugo.io/ghostwriter/&#34;&gt;ghostwriter&lt;/a&gt;&#xA;讲道理，这一个主题是最让我挣扎的一个。因为，实在是太简约太geek范儿了！虽然在最终的抉择中，我还是外貌协会了，投靠了&lt;a href=&#34;http://themes.gohugo.io/casper/&#34;&gt;Casper&lt;/a&gt;,但是这个风格真的超喜欢啊！仅次于外貌协会（的选择）！&lt;/p&gt;&#xA;&lt;p&gt;其他几个比较简约又比较适合写博客的主题还有：&#xA;&lt;a href=&#34;http://themes.gohugo.io/crisp/&#34;&gt;Crisp&lt;/a&gt;  &lt;a href=&#34;http://themes.gohugo.io/herring-cove/&#34;&gt;Herring Cove&lt;/a&gt;  &lt;a href=&#34;http://themes.gohugo.io/hugo-sustain/&#34;&gt;Sustain&lt;/a&gt;&#xA;但是总的来说还是没有一张大图占据整个屏幕带来的视觉冲击感更吸引我了= =！&lt;/p&gt;&#xA;&lt;p&gt;4.一个逗比主题&lt;a href=&#34;http://themes.gohugo.io/simple-hugo/&#34;&gt;simple-hugo&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;qnmd,这不就是jekyll的默认主题吗。在这里面有很多是jekyll主题转化过来的！（还有个ghost，估计也是个静态页面生成器）&lt;/p&gt;&#xA;&lt;h4 id=&#34;使用hugo搭建个人网站时的参考资料&#34;&gt;使用Hugo搭建个人网站时的参考资料：&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.gohugo.org&#34;&gt;Hugo中文文档&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://blog.coderzh.com/2015/08/29/hugo/&#34;&gt;使用hugo搭建个人博客站点&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;themes&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;把字调大一些就是好，不仅看着舒服，看起来还觉得写了不少，特爽。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
