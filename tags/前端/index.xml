<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on Shawn New Blog</title>
    <link>//liushengxian.github.io/tags/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on Shawn New Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Sep 2025 01:49:51 +0800</lastBuildDate>
    <atom:link href="//liushengxian.github.io/tags/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React的useLayoutEffect使用</title>
      <link>//liushengxian.github.io/posts/react-uselayouteffect/</link>
      <pubDate>Sat, 27 Sep 2025 01:49:51 +0800</pubDate>
      <guid>//liushengxian.github.io/posts/react-uselayouteffect/</guid>
      <description>&lt;h2 id=&#34;问题背景&#34;&gt;问题背景&lt;/h2&gt;&#xA;&lt;p&gt;这周在帮助b哥完成他的项目前端的时候遇到了一个有趣的问题。&lt;/p&gt;&#xA;&lt;p&gt;先介绍下背景，这是一个企业内即时通讯工具，主要的页面布局，从上往下依次包括消息列表、选择面板、操作栏、输入框。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://misanya-1252867445.cos.ap-shanghai.myqcloud.com/screenshot9527.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;初次尝试dom结构调整&#34;&gt;初次尝试：DOM结构调整&lt;/h2&gt;&#xA;&lt;p&gt;在一开始的时候，b哥提出的问题在于如何修改CSS让选择面板正确的渲染到操作栏的上方而不是下面。&lt;/p&gt;&#xA;&lt;p&gt;这个我想到的当然是直接修改dom结构，何必要用CSS来实现呢，很快就实现了这个需求。&lt;/p&gt;&#xA;&lt;h2 id=&#34;隐藏的挑战异步渲染顺序&#34;&gt;隐藏的挑战：异步渲染顺序&lt;/h2&gt;&#xA;&lt;p&gt;然而在之后却发现了新的问题，因为选择面板和消息列表的加载其实是依赖于API的。在当时我们反复测试的情况是，操作栏先渲染成功，然后是消息列表，最后是选择面板。&lt;/p&gt;&#xA;&lt;p&gt;对于除了消息列表之外的其他组件，其实是会占据空间然后导致消息列表的可见范围越来越短的。&lt;/p&gt;&#xA;&lt;p&gt;在操作栏渲染之后，消息列表才开始渲染，一切都显得很正常。而当选择面板出现的时候，消息列表的高度变小了，但是内容却没有维持在最新的位置。&lt;/p&gt;&#xA;&lt;h2 id=&#34;尝试css解决方案&#34;&gt;尝试CSS解决方案&lt;/h2&gt;&#xA;&lt;p&gt;这个问题看起来很简单的。b哥要求使用css来完成这个任务，询问AI之后，给出的是flex的column-reverse方案，这个方法看起来可行，实际上却并没有解决问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;回顾现有代码javascript解决方案&#34;&gt;回顾现有代码：JavaScript解决方案&lt;/h2&gt;&#xA;&lt;p&gt;当重新阅读代码的时候，发现其实之前的代码使用了一个Javascript方法，在数据加载完成后，手动调用面板的ScrollIntoView方法，以适应高度的变化。&lt;/p&gt;&#xA;&lt;p&gt;那么使用纯CSS就没法实现这个功能了，因为这个方法已经在多个地方使用，我们只能继续在合适的地方继续使用而不是自己新建一套CSS方案。&lt;/p&gt;&#xA;&lt;p&gt;脱敏示例代码如下&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recalcposition&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;setTimemout&lt;/span&gt;(() =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;panelRef&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;scrollIntoView&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;behavior&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;instant&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt; });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;探索dom观察者api&#34;&gt;探索DOM观察者API&lt;/h2&gt;&#xA;&lt;p&gt;一开始我想的是能否找到一个onResize的事件来监听页面的变化，但是实际上React似乎并没有封装这么一套系统，而我又不想使用原生的接口，于是乎想到了IntersectionObserver类似的DOM接口。&lt;/p&gt;&#xA;&lt;p&gt;AI推荐了ResizeObserver/MutationObserver。当使用ResizeObserver时，我们发现成功了，但是却发生了新的问题：&lt;/p&gt;&#xA;&lt;h2 id=&#34;新问题渲染延迟&#34;&gt;新问题：渲染延迟&lt;/h2&gt;&#xA;&lt;p&gt;每一次都是选择面板渲染成功之后，经过了一个定量的延迟，消息面板才会滚动到最新的底部位置。&lt;/p&gt;&#xA;&lt;p&gt;这个问题可把我们难到了，尝试MutationObserver或者去掉recalcposition的延迟都没有什么效果。&lt;/p&gt;&#xA;&lt;p&gt;也许只能这样了？&lt;/p&gt;&#xA;&lt;h2 id=&#34;思考的时间&#34;&gt;思考的时间&lt;/h2&gt;&#xA;&lt;p&gt;我下楼抽了根烟，在考虑为什么会发生这个延迟。&lt;/p&gt;&#xA;&lt;h2 id=&#34;react渲染机制的启示&#34;&gt;React渲染机制的启示&lt;/h2&gt;&#xA;&lt;p&gt;当想到之前看过的React渲染机制的时候，我想到，在React中，无论如何，这些浏览器API生效的时候都在Commit阶段之后。&lt;/p&gt;&#xA;&lt;p&gt;那么只有等到下一次React渲染的时候，新的位置才会生效。想起来了useLayoutEffect这个Hook好像是在Commit阶段之前生效，用于修改dom的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;最终解决方案uselayouteffect&#34;&gt;最终解决方案：useLayoutEffect&lt;/h2&gt;&#xA;&lt;p&gt;我立即回来尝试了一番，&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;useLayoutEffect&lt;/span&gt;(() =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;panelRef&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;scrollIntoView&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;behavior&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;instant&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt; });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}, [&lt;span style=&#34;color:#a6e22e&#34;&gt;someVarToShowChoosePanel&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;果不其然，延迟消失了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;&#xA;&lt;p&gt;useLayoutEffect 与普通的 useEffect 相比，最关键的区别在于它的执行时机。它会在DOM变更后、浏览器绘制前同步执行，这使得它特别适合于需要直接操作DOM并且希望避免视觉闪烁的场景。&lt;/p&gt;&#xA;&lt;p&gt;在我们的案例中，这正是解决渲染延迟问题的关键 - 确保滚动操作发生在浏览器绘制之前，而不是之后。这种精确的时机控制是React hooks提供给我们的强大工具之一。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monaco Editor的一些问题记录</title>
      <link>//liushengxian.github.io/posts/monaco-editor-problems/</link>
      <pubDate>Tue, 07 Feb 2023 00:00:14 +0800</pubDate>
      <guid>//liushengxian.github.io/posts/monaco-editor-problems/</guid>
      <description>&lt;p&gt;上周末开始老薛开始呼叫支援，他的项目里的monaco-editor在升级的时候遭遇问题，结果TypeScript编译过程报错了。&lt;/p&gt;&#xA;&lt;p&gt;周末那天因为仓促接到需求，在node@18 + webpack@5 下面搭建了一次monaco-editor和monaco-languageclient。项目代码是能跑过编译的。就把项目代码post到GitHub上，算是草草交差了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/liushengxian/monaco-client-webpack-test&#34;&gt;https://github.com/liushengxian/monaco-client-webpack-test&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;但是今天又接到消息。他测试后发现，node 12下也还是行不通的。node 18却根本不需要安装monaco-vscode-api都可以通过编译。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CraigMeng/monaco-webpack-node-12&#34;&gt;https://github.com/CraigMeng/monaco-webpack-node-12&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;于是乎，今天花了两小时一起debug。最终也没get到解决方案。但是发现了一些小区别：&lt;/p&gt;&#xA;&lt;p&gt;比如：https://github.com/nodejs/node/pull/29978&lt;/p&gt;&#xA;&lt;p&gt;node到13.2才开始支持&lt;strong&gt;条件式导出&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;最后我们定位到的问题是，vscode/services找不到这个定义。然而这个定义是在一个虚假的vscode包里。因为我们用package.json里定义的vscode是&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;vscode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;npm:@codingame/monaco-vscode-api@^1.69.17&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而在我将node版本升级到13，14的时候，项目却依然报同样的错。甚至于升级到18的时候，dev-server直接挂掉了。最后没有办法，我们只能给monaco-languageclient提了一个issue：&#xA;&lt;a href=&#34;https://github.com/TypeFox/monaco-languageclient/issues/458&#34;&gt;https://github.com/TypeFox/monaco-languageclient/issues/458&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;虽然可能于事无补，毕竟老薛这个repo的node版本已经太旧了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>记录一个jQuery的问题</title>
      <link>//liushengxian.github.io/posts/record_a_jquery_bug/</link>
      <pubDate>Wed, 08 Mar 2017 10:37:45 +0800</pubDate>
      <guid>//liushengxian.github.io/posts/record_a_jquery_bug/</guid>
      <description>&lt;h3 id=&#34;记录一个jquery的bug的查找过程&#34;&gt;记录一个jQuery的bug的查找过程&lt;/h3&gt;&#xA;&lt;p&gt;想写这个也是觉得无聊。而且想起了那个巨硬工程师gay里gay气的丑恶嘴脸。虽然是很无聊的一个bug，但是还是拿来记录一下吧。&lt;/p&gt;&#xA;&lt;h4 id=&#34;发现问题&#34;&gt;发现问题&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;//liushengxian.github.io/post/imgs/bug-01.png&#34; alt=&#34;问题截图&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这个问题是由我司的测试小姐姐们提出来的。在IE9上面我们的侧边评论栏的评论无论内容多少都会被折叠。首先到IE9上面去查看DOM结构，发现如下的内嵌style：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;//liushengxian.github.io/post/imgs/bug-03.png&#34; alt=&#34;有问题的DOM结构&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;很明显，不知道是谁给添加了一个line-height:3px的限制。&lt;/p&gt;&#xA;&lt;h4 id=&#34;定位问题&#34;&gt;定位问题&lt;/h4&gt;&#xA;&lt;p&gt;在PHPStorm里搜索这个评论列表的id，翻来翻去定位到了以下的这个方法：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;contentToggle: function () {&#xA;let $dom = $(&#39;#js_comment_list .txt p&#39;);&#xA;$dom.each(function (index) {&#xA;&#x9;let $domHeight = parseInt($(this).css(&#39;height&#39;));&#xA;&#x9;let $domLineHeight = parseInt($(this).css(&#39;lineHeight&#39;));&#xA;&#x9;//console.info(&#39;line height is &#39;+$domLineHeight+&#39;,index is:&#39;+index);&#xA;&#x9;let $domMaxHeight = $domLineHeight * 3;&#xA;&#x9;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;找到问题&#34;&gt;找到问题&lt;/h4&gt;&#xA;&lt;p&gt;看到最后那行的$domLineHeight * 3，我想大概大家也明白了。因为获取的LineHeight可能是没有单位的1，乘以3加上px就添加到了那上面了。所以在代码里添加上面那一行控制台输出测试下，在IE9/Chrome上面分别得到以下结果：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;//liushengxian.github.io/post/imgs/bug-02.png&#34; alt=&#34;IE9的控制台输出&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;//liushengxian.github.io/post/imgs/bug-04.png&#34; alt=&#34;Chrome的控制台输出&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;果然如我们所推理的，在IE9下面输出的是不带单位的数字，而我们代码里默认返回值以px为单位的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://bugs.jquery.com/ticket/13472&#34;&gt;JQuery Bug Report&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;解决问题&#34;&gt;解决问题&lt;/h4&gt;&#xA;&lt;p&gt;我所想的解决方法是，看line-height是否是小于12的值，如果是，则说明是一个相对值，对吧？&lt;/p&gt;&#xA;&lt;p&gt;但是实际上讨论之后，因为这个comment-box只在这个地方用到。所以干脆把line-height写成了一个固定值 18。&lt;/p&gt;&#xA;&lt;h4 id=&#34;总结问题&#34;&gt;总结问题&lt;/h4&gt;&#xA;&lt;p&gt;总结个毛啊 有啥好总结的。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
