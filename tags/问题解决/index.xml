<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>问题解决 on Shawn New Blog</title>
    <link>//liushengxian.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</link>
    <description>Recent content in 问题解决 on Shawn New Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Sep 2025 01:49:51 +0800</lastBuildDate>
    <atom:link href="//liushengxian.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React的useLayoutEffect使用</title>
      <link>//liushengxian.github.io/posts/react-uselayouteffect/</link>
      <pubDate>Sat, 27 Sep 2025 01:49:51 +0800</pubDate>
      <guid>//liushengxian.github.io/posts/react-uselayouteffect/</guid>
      <description>&lt;h2 id=&#34;问题背景&#34;&gt;问题背景&lt;/h2&gt;&#xA;&lt;p&gt;这周在帮助b哥完成他的项目前端的时候遇到了一个有趣的问题。&lt;/p&gt;&#xA;&lt;p&gt;先介绍下背景，这是一个企业内即时通讯工具，主要的页面布局，从上往下依次包括消息列表、选择面板、操作栏、输入框。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://misanya-1252867445.cos.ap-shanghai.myqcloud.com/screenshot9527.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;初次尝试dom结构调整&#34;&gt;初次尝试：DOM结构调整&lt;/h2&gt;&#xA;&lt;p&gt;在一开始的时候，b哥提出的问题在于如何修改CSS让选择面板正确的渲染到操作栏的上方而不是下面。&lt;/p&gt;&#xA;&lt;p&gt;这个我想到的当然是直接修改dom结构，何必要用CSS来实现呢，很快就实现了这个需求。&lt;/p&gt;&#xA;&lt;h2 id=&#34;隐藏的挑战异步渲染顺序&#34;&gt;隐藏的挑战：异步渲染顺序&lt;/h2&gt;&#xA;&lt;p&gt;然而在之后却发现了新的问题，因为选择面板和消息列表的加载其实是依赖于API的。在当时我们反复测试的情况是，操作栏先渲染成功，然后是消息列表，最后是选择面板。&lt;/p&gt;&#xA;&lt;p&gt;对于除了消息列表之外的其他组件，其实是会占据空间然后导致消息列表的可见范围越来越短的。&lt;/p&gt;&#xA;&lt;p&gt;在操作栏渲染之后，消息列表才开始渲染，一切都显得很正常。而当选择面板出现的时候，消息列表的高度变小了，但是内容却没有维持在最新的位置。&lt;/p&gt;&#xA;&lt;h2 id=&#34;尝试css解决方案&#34;&gt;尝试CSS解决方案&lt;/h2&gt;&#xA;&lt;p&gt;这个问题看起来很简单的。b哥要求使用css来完成这个任务，询问AI之后，给出的是flex的column-reverse方案，这个方法看起来可行，实际上却并没有解决问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;回顾现有代码javascript解决方案&#34;&gt;回顾现有代码：JavaScript解决方案&lt;/h2&gt;&#xA;&lt;p&gt;当重新阅读代码的时候，发现其实之前的代码使用了一个Javascript方法，在数据加载完成后，手动调用面板的ScrollIntoView方法，以适应高度的变化。&lt;/p&gt;&#xA;&lt;p&gt;那么使用纯CSS就没法实现这个功能了，因为这个方法已经在多个地方使用，我们只能继续在合适的地方继续使用而不是自己新建一套CSS方案。&lt;/p&gt;&#xA;&lt;p&gt;脱敏示例代码如下&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recalcposition&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;setTimemout&lt;/span&gt;(() =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;panelRef&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;scrollIntoView&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;behavior&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;instant&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt; });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;探索dom观察者api&#34;&gt;探索DOM观察者API&lt;/h2&gt;&#xA;&lt;p&gt;一开始我想的是能否找到一个onResize的事件来监听页面的变化，但是实际上React似乎并没有封装这么一套系统，而我又不想使用原生的接口，于是乎想到了IntersectionObserver类似的DOM接口。&lt;/p&gt;&#xA;&lt;p&gt;AI推荐了ResizeObserver/MutationObserver。当使用ResizeObserver时，我们发现成功了，但是却发生了新的问题：&lt;/p&gt;&#xA;&lt;h2 id=&#34;新问题渲染延迟&#34;&gt;新问题：渲染延迟&lt;/h2&gt;&#xA;&lt;p&gt;每一次都是选择面板渲染成功之后，经过了一个定量的延迟，消息面板才会滚动到最新的底部位置。&lt;/p&gt;&#xA;&lt;p&gt;这个问题可把我们难到了，尝试MutationObserver或者去掉recalcposition的延迟都没有什么效果。&lt;/p&gt;&#xA;&lt;p&gt;也许只能这样了？&lt;/p&gt;&#xA;&lt;h2 id=&#34;思考的时间&#34;&gt;思考的时间&lt;/h2&gt;&#xA;&lt;p&gt;我下楼抽了根烟，在考虑为什么会发生这个延迟。&lt;/p&gt;&#xA;&lt;h2 id=&#34;react渲染机制的启示&#34;&gt;React渲染机制的启示&lt;/h2&gt;&#xA;&lt;p&gt;当想到之前看过的React渲染机制的时候，我想到，在React中，无论如何，这些浏览器API生效的时候都在Commit阶段之后。&lt;/p&gt;&#xA;&lt;p&gt;那么只有等到下一次React渲染的时候，新的位置才会生效。想起来了useLayoutEffect这个Hook好像是在Commit阶段之前生效，用于修改dom的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;最终解决方案uselayouteffect&#34;&gt;最终解决方案：useLayoutEffect&lt;/h2&gt;&#xA;&lt;p&gt;我立即回来尝试了一番，&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;useLayoutEffect&lt;/span&gt;(() =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;panelRef&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;scrollIntoView&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;behavior&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;instant&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt; });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}, [&lt;span style=&#34;color:#a6e22e&#34;&gt;someVarToShowChoosePanel&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;果不其然，延迟消失了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;&#xA;&lt;p&gt;useLayoutEffect 与普通的 useEffect 相比，最关键的区别在于它的执行时机。它会在DOM变更后、浏览器绘制前同步执行，这使得它特别适合于需要直接操作DOM并且希望避免视觉闪烁的场景。&lt;/p&gt;&#xA;&lt;p&gt;在我们的案例中，这正是解决渲染延迟问题的关键 - 确保滚动操作发生在浏览器绘制之前，而不是之后。这种精确的时机控制是React hooks提供给我们的强大工具之一。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monaco Editor的一些问题记录</title>
      <link>//liushengxian.github.io/posts/monaco-editor-problems/</link>
      <pubDate>Tue, 07 Feb 2023 00:00:14 +0800</pubDate>
      <guid>//liushengxian.github.io/posts/monaco-editor-problems/</guid>
      <description>&lt;p&gt;上周末开始老薛开始呼叫支援，他的项目里的monaco-editor在升级的时候遭遇问题，结果TypeScript编译过程报错了。&lt;/p&gt;&#xA;&lt;p&gt;周末那天因为仓促接到需求，在node@18 + webpack@5 下面搭建了一次monaco-editor和monaco-languageclient。项目代码是能跑过编译的。就把项目代码post到GitHub上，算是草草交差了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/liushengxian/monaco-client-webpack-test&#34;&gt;https://github.com/liushengxian/monaco-client-webpack-test&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;但是今天又接到消息。他测试后发现，node 12下也还是行不通的。node 18却根本不需要安装monaco-vscode-api都可以通过编译。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CraigMeng/monaco-webpack-node-12&#34;&gt;https://github.com/CraigMeng/monaco-webpack-node-12&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;于是乎，今天花了两小时一起debug。最终也没get到解决方案。但是发现了一些小区别：&lt;/p&gt;&#xA;&lt;p&gt;比如：https://github.com/nodejs/node/pull/29978&lt;/p&gt;&#xA;&lt;p&gt;node到13.2才开始支持&lt;strong&gt;条件式导出&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;最后我们定位到的问题是，vscode/services找不到这个定义。然而这个定义是在一个虚假的vscode包里。因为我们用package.json里定义的vscode是&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;vscode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;npm:@codingame/monaco-vscode-api@^1.69.17&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而在我将node版本升级到13，14的时候，项目却依然报同样的错。甚至于升级到18的时候，dev-server直接挂掉了。最后没有办法，我们只能给monaco-languageclient提了一个issue：&#xA;&lt;a href=&#34;https://github.com/TypeFox/monaco-languageclient/issues/458&#34;&gt;https://github.com/TypeFox/monaco-languageclient/issues/458&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;虽然可能于事无补，毕竟老薛这个repo的node版本已经太旧了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>记录工作中遇到的两个bug</title>
      <link>//liushengxian.github.io/posts/two-bugs-in-work/</link>
      <pubDate>Wed, 11 Nov 2020 01:23:08 +0800</pubDate>
      <guid>//liushengxian.github.io/posts/two-bugs-in-work/</guid>
      <description>&lt;p&gt;很久没有写blog了。这次在工作中遇到两个bug，更新一下。&lt;/p&gt;&#xA;&lt;h3 id=&#34;生产环境与开发环境不一致的问题&#34;&gt;生产环境与开发环境不一致的问题&lt;/h3&gt;&#xA;&lt;p&gt;在上线几个新功能之后，突然QA反馈线上的某个页面的switch按钮不见了。当然，因为程序具有默认行为，所以这几个按钮不见倒也没有太多的用户反馈。&lt;/p&gt;&#xA;&lt;p&gt;因为可能在用户看来这个页面本来就是不能做更多控制的。所以我有足够的时间来找出问题的所在。&lt;/p&gt;&#xA;&lt;p&gt;在尝试了多次改动之后，发现这个switch按钮在开发环境&amp;amp;测试环境都能看到。但是一到了beta环境或者线上生产环境之后，就还是莫名其妙的失踪了。在线上的console里面甚至看不到任何有用的报错信息。。只有一个奇怪的没有任何提示的红色Error。&lt;/p&gt;&#xA;&lt;p&gt;用Chrome的console指针点击页面后，发现按钮组件的dom根本没有生成，而是一个类似于v-if=&amp;ldquo;false&amp;quot;情况下的&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!-- --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我开始怀疑是否组件没有正确传入参数，并尝试了几次修改控制组件展示的变量，但是都没有成功，仍旧是在开发环境生龙活虎，在线上、beta消失不见。&lt;/p&gt;&#xA;&lt;p&gt;在咨询浩洋哥之后，他提出可以让运维看一下是否发布了正确的版本。&lt;/p&gt;&#xA;&lt;p&gt;但是我对比了自己push上去的代码的hash值与CI中build的hash值，却是一样的，说明发布环境没有什么问题。&lt;/p&gt;&#xA;&lt;p&gt;就在我百思不得其解的时候，我在beta环境上看到了一个错误提示。应该也就是线上那个被过滤掉的错误提示信息。&lt;/p&gt;&#xA;&lt;p&gt;大概意思是说，true不能作为值 赋值给onClick。&lt;/p&gt;&#xA;&lt;p&gt;恍然大悟，想到自己在这个组件里看到的on={true}这个选项。意识到这里的on被某个插件（怀疑是升级过后的babel插件、或者typescript插件）自动识别成了onClick。然后将布尔值赋给onClick，自然会无法赋值成功，然后导致运行时错误，dom也就无法顺利渲染出来了。&lt;/p&gt;&#xA;&lt;p&gt;将on这个属性改为switch之后，上beta，果然，问题解决了。&lt;/p&gt;&#xA;&lt;h3 id=&#34;启发&#34;&gt;启发&lt;/h3&gt;&#xA;&lt;p&gt;首先这个坑是前面人留下来的，用on来作为一个标志记录组件的状态属实是有些问题的。一般朋友命名时应该都不会用这么简单的名称来写到dom属性上面去吧。&lt;/p&gt;&#xA;&lt;p&gt;其次，对我的启发是，自己对代码打包过程的理解还是不足的。如果能够知道每个依赖都做了什么的话，也许在一开始从线上/线下环境不一致就应该考虑到是打包工具的问题。继而寻找代码中有哪些地方做的不够规范。&lt;/p&gt;&#xA;&lt;h3 id=&#34;vue-router中replace方法失效的问题&#34;&gt;vue-router中replace方法失效的问题&lt;/h3&gt;&#xA;&lt;p&gt;第二个问题更加让人头疼。搞了一天才总算搞定。&lt;/p&gt;&#xA;&lt;p&gt;当前负责的这个项目中，vue-router的replace方法莫名失效了。结果导致在很多机型上面，操作应用之后各种页面都push进history栈当中。在返回的时候，会有很多之前的页面，返回半天才能返回到应用的入口。&lt;/p&gt;&#xA;&lt;p&gt;前面的项目负责人为了解决这个问题，在程序中用了hack的方法，监听页面左上角的返回按钮，在返回到首页的时候，点击返回按钮直接关闭应用。而我也做了一个优化，就是用客户端同事提供的sdk，监听了返回事件，进行页面的跳转。&lt;/p&gt;&#xA;&lt;p&gt;但是这个方法也有其无法处理的问题。就是在iOS的机型上面，左滑返回上一页是不在返回事件控制的范畴之内的。导致在iOS上面左滑很多次都有奇怪的页面，很多次才能退出应用。当然一直使用push也会导致应用算占据的内存不断膨胀，也许在操作多次之后就会crash（未验证是否keep-alive会有助于解决这个情况）&lt;/p&gt;&#xA;&lt;p&gt;所以我就着手开始解决这个问题。&lt;/p&gt;&#xA;&lt;p&gt;其实问题一开始发现也是QA这边发现的，反馈的问题是我们上线新代码之后频繁出现了这个问题（这个问题QA同学一直有遇到过，但是这几次上线之后特别频繁，稳定复现）。&lt;/p&gt;&#xA;&lt;p&gt;第一个发现的问题就是，在应用首页多个tab中，之前的开发使用了$router.replace()来记录首页多个tab的变化。当我把这个$router.replace()去掉之后，应用正常切换tab，且观察到浏览器当中的history栈不再增加。&lt;/p&gt;&#xA;&lt;p&gt;理论上使用replace来做这种事情是没有问题的。但是在这个replace不生效，莫名变成push的情况下，就变得很糟糕。可以通过快速点击首页的tab实现生成爆炸长度的history。&lt;/p&gt;&#xA;&lt;p&gt;当我搜索项目后，发现这个replace主要是提供了一个新的query，叫做tabIndex的值，给另外仅有的一个地方使用。这就让我很放心了，其实这种在app内的应用，完全可以不需要这种地址，反正每次进入都是首页，而且切换tab的事情完全可以放到vuex当中存储。没必要放到路由当中，如果实在不行，就把首页的这个replace撤掉，然后改写一下那仅有的一个地方好了。&lt;/p&gt;&#xA;&lt;p&gt;但是问题没有那么简单，虽然这个tabIndex只有一个地方使用，但使用$router.replace()的地方可不止一处，而且很多地方都是不可替换的。&lt;/p&gt;&#xA;&lt;p&gt;那么我们继续调查为什么这个router.replace()失败了呢。当我回归到vue-router的文档时，发现replace方法的第二个、第三个参数可以分别设置为replace成功与失败的回调。当然也可以不设置，这样replace返回的是一个promise，可以使用then，catch语句进行捕获结果/错误。&lt;/p&gt;&#xA;&lt;p&gt;心想这样总可以找到问题了吧。然后用了回调&amp;amp;catch语句发现，的确是跳转路由失败了，但却没有返回值。（笔者用的vue-router版本不是最新的，最新的代码已经添加了这个报错信息）&lt;/p&gt;&#xA;&lt;p&gt;返回的报错值是undefined，就很让人头大，不知道问题出在哪里。&lt;/p&gt;&#xA;&lt;p&gt;尝试了一下replaceState方法，发现在使用这个方法的时候，能够正确地更新history历史。实在不行我就把所有的$router.replace()都替换成history.replaceState()吧。我这么想着。&lt;/p&gt;&#xA;&lt;p&gt;回头去看vue-router的文档，发现有一个replace选项，甚至在网上查到尤大在0.x版本的github issue上面跟网友探讨是否replace的默认值设置为true会更好一些。抱着试一试的心态我给项目中所有replace方法添加了replace： true。&lt;/p&gt;&#xA;&lt;p&gt;果不其然，没有任何用处。&lt;/p&gt;&#xA;&lt;p&gt;没办法，只能硬着头皮去看vue-router的源码了。使用debugger开始单步调试，看了大半天，也没发现什么问题。看到不知道几层的代码逻辑之后，连自己也绕晕了。不想再读下去了。&lt;/p&gt;&#xA;&lt;p&gt;心想，难道真的升级下vue-router的版本就可以了？于是自己抱着怀疑的态度，去随便搜索了一个公司内的其他项目，确认了代码中也使用了replace方法，然后发现不论是公司的脚手架，还是vue-router的版本，都是一样的。&lt;/p&gt;&#xA;&lt;p&gt;果然，问题不出在vue-router或者脚手架的版本上面。前面已经翻过脚手架的CHANGELOG，根本没有发现有什么修复vue-router相关的问题。在网上搜索也找不到相同的情况。&lt;/p&gt;&#xA;&lt;p&gt;只好无奈地继续翻vue-router的源码，单步调试看问题出在哪里。嗯，，vue-router最后会生成一个队列，然后把所有钩子函数都执行一遍，然后跳到了一个方法当中去，根据这个方法中的to.replace来看是需要使用push还是replace方法。等等。。？这个to是哪里来的？不是replace方法中的replace选项，那是哪里来的？看着单步调试中，栈在处理完队列的时候，history的长度又增加了1，就觉得莫名忧伤。&lt;/p&gt;&#xA;&lt;p&gt;就在这时，我找不到原因的时候，又看到了自己之前尝试的replaceState()的代码，在浏览器中尝试，突然发现自己页面上面虽然能够跳转成功，但是页面的query中携带的用户信息&amp;amp;其他query都不见了。&lt;/p&gt;&#xA;&lt;p&gt;这就让我想起之前看到的项目中，两年前项目开始的时候就已经添加上的那个写给vue的插件了。这个插件添加了一个beforeRoute钩子，在钩子中，保留了需要保存的query信息。我想如果要用replaceState来做的话，也要看下怎么兼容这个方案吧。&lt;/p&gt;&#xA;&lt;p&gt;打开plugin的文件的时候，突然一道灵光闪过，我意识到问题所在了。&lt;/p&gt;&#xA;&lt;p&gt;！！！！！！&lt;/p&gt;&#xA;&lt;p&gt;就是这个plugin在它的钩子里使用next()方法修改url的时候，没有使用replace参数！导致每次$router.replace()都会新增一个页面到history栈当中去！&lt;/p&gt;&#xA;&lt;p&gt;在给next方法添加了replace：true选项之后，反复试了几次，发现果然history在$router.replace()的时候不再增加了。&lt;/p&gt;&#xA;&lt;p&gt;我解决了一个两年前的bug！&lt;/p&gt;&#xA;&lt;h3 id=&#34;启发-1&#34;&gt;启发&lt;/h3&gt;&#xA;&lt;p&gt;谁也不曾想到，这个问题居然会是这样引起的。&lt;/p&gt;&#xA;&lt;p&gt;反思自己一步步来debug的过程，可以看到自己对vue-router的原理一步步加深，但是还是没有完全吃透。&lt;/p&gt;&#xA;&lt;p&gt;所以，还是努力把vue-router的源码搞清楚吧。这样再次遇到类似的问题时候，就会更快定位到问题所在。&lt;/p&gt;&#xA;&lt;p&gt;再一个启发就是，vue-router已经经历了社区的验证，其实不需要花费过多时间在找它的问题上面，而应该将问题聚焦于自己的业务代码上面。毕竟其他使用vue-router的项目，都没有遇到这个奇葩的问题。所以问题更大可能性是出在我们自己的业务代码/项目自有的框架上面。&lt;/p&gt;&#xA;&lt;h3 id=&#34;最后&#34;&gt;最后&lt;/h3&gt;&#xA;&lt;p&gt;晚安！ 好好休息，保持好状态，不要过分熬夜！就算进度赶不上，也不要太过着急了！&lt;/p&gt;</description>
    </item>
    <item>
      <title>拯救你的ubuntu</title>
      <link>//liushengxian.github.io/posts/save_you_linux_system/</link>
      <pubDate>Thu, 08 Mar 2018 11:19:14 +0800</pubDate>
      <guid>//liushengxian.github.io/posts/save_you_linux_system/</guid>
      <description>&lt;p&gt;在给大金鱼的ubuntu添加gulp相关的环境变量时候，因为看了不正确的教程。把/opt/profile里的内容修改了，导致无法进入系统。登录界面输入正确密码反复卡在登录界面。&lt;/p&gt;&#xA;&lt;p&gt;折腾了许久，发现了解决方案：&#xA;在启动系统的时候长按shift，进入Linux的Recovery Mode，但是，这个mode下面却无法修改文件。在grub选择Recovery Mode的时候按E，编辑启动文件来修改启动方式。&lt;/p&gt;&#xA;&lt;p&gt;将 ro recovery nomodeset 改为 rw single init=/bin/bash&lt;/p&gt;&#xA;&lt;p&gt;参考资料：&lt;a href=&#34;http://blog.csdn.net/code_segment/article/details/78145574&#34;&gt;recovery mode&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>记录一个jQuery的问题</title>
      <link>//liushengxian.github.io/posts/record_a_jquery_bug/</link>
      <pubDate>Wed, 08 Mar 2017 10:37:45 +0800</pubDate>
      <guid>//liushengxian.github.io/posts/record_a_jquery_bug/</guid>
      <description>&lt;h3 id=&#34;记录一个jquery的bug的查找过程&#34;&gt;记录一个jQuery的bug的查找过程&lt;/h3&gt;&#xA;&lt;p&gt;想写这个也是觉得无聊。而且想起了那个巨硬工程师gay里gay气的丑恶嘴脸。虽然是很无聊的一个bug，但是还是拿来记录一下吧。&lt;/p&gt;&#xA;&lt;h4 id=&#34;发现问题&#34;&gt;发现问题&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;//liushengxian.github.io/post/imgs/bug-01.png&#34; alt=&#34;问题截图&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这个问题是由我司的测试小姐姐们提出来的。在IE9上面我们的侧边评论栏的评论无论内容多少都会被折叠。首先到IE9上面去查看DOM结构，发现如下的内嵌style：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;//liushengxian.github.io/post/imgs/bug-03.png&#34; alt=&#34;有问题的DOM结构&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;很明显，不知道是谁给添加了一个line-height:3px的限制。&lt;/p&gt;&#xA;&lt;h4 id=&#34;定位问题&#34;&gt;定位问题&lt;/h4&gt;&#xA;&lt;p&gt;在PHPStorm里搜索这个评论列表的id，翻来翻去定位到了以下的这个方法：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;contentToggle: function () {&#xA;let $dom = $(&#39;#js_comment_list .txt p&#39;);&#xA;$dom.each(function (index) {&#xA;&#x9;let $domHeight = parseInt($(this).css(&#39;height&#39;));&#xA;&#x9;let $domLineHeight = parseInt($(this).css(&#39;lineHeight&#39;));&#xA;&#x9;//console.info(&#39;line height is &#39;+$domLineHeight+&#39;,index is:&#39;+index);&#xA;&#x9;let $domMaxHeight = $domLineHeight * 3;&#xA;&#x9;...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;找到问题&#34;&gt;找到问题&lt;/h4&gt;&#xA;&lt;p&gt;看到最后那行的$domLineHeight * 3，我想大概大家也明白了。因为获取的LineHeight可能是没有单位的1，乘以3加上px就添加到了那上面了。所以在代码里添加上面那一行控制台输出测试下，在IE9/Chrome上面分别得到以下结果：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;//liushengxian.github.io/post/imgs/bug-02.png&#34; alt=&#34;IE9的控制台输出&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;//liushengxian.github.io/post/imgs/bug-04.png&#34; alt=&#34;Chrome的控制台输出&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;果然如我们所推理的，在IE9下面输出的是不带单位的数字，而我们代码里默认返回值以px为单位的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://bugs.jquery.com/ticket/13472&#34;&gt;JQuery Bug Report&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;解决问题&#34;&gt;解决问题&lt;/h4&gt;&#xA;&lt;p&gt;我所想的解决方法是，看line-height是否是小于12的值，如果是，则说明是一个相对值，对吧？&lt;/p&gt;&#xA;&lt;p&gt;但是实际上讨论之后，因为这个comment-box只在这个地方用到。所以干脆把line-height写成了一个固定值 18。&lt;/p&gt;&#xA;&lt;h4 id=&#34;总结问题&#34;&gt;总结问题&lt;/h4&gt;&#xA;&lt;p&gt;总结个毛啊 有啥好总结的。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
